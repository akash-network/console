import { isTsProtoGeneratedType, Registry } from '@cosmjs/proto-signing';
import { Injectable } from '@nestjs/common';

export interface DecodedMessageValue {
  [key: string]: unknown;
}

@Injectable()
export class MessageDecoderService {
  constructor(private readonly registry: Registry) {}

  decodeMsg(type: string, msg: Uint8Array): DecodedMessageValue | null {
    const msgType = this.registry.lookupType(type);

    if (!msgType) {
      throw new Error('Type not found: ' + type);
    }

    if (!isTsProtoGeneratedType(msgType)) {
      throw new Error('Type is not generated by ts-protobuf: ' + type);
    }

    return msgType.decode(msg);
  }

  uint8arrayToString(arr: Uint8Array): string {
    return new TextDecoder().decode(arr);
  }
}
