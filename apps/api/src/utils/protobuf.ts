import * as v1beta1 from "@akashnetwork/akash-api/v1beta1";
import * as v1beta2 from "@akashnetwork/akash-api/v1beta2";
import * as v1beta3 from "@akashnetwork/akash-api/v1beta3";
import * as v1beta4 from "@akashnetwork/akash-api/v1beta4";
import type { GeneratedType } from "@cosmjs/proto-signing";
import { isTsProtoGeneratedType, Registry } from "@cosmjs/proto-signing";
import { defaultRegistryTypes } from "@cosmjs/stargate";
import { MsgUnjail } from "cosmjs-types/cosmos/slashing/v1beta1/tx";
import omit from "lodash/omit";

const akashTypes: ReadonlyArray<[string, GeneratedType]> = [
  ...Object.values(v1beta1),
  ...Object.values(omit(v1beta2, "Storage")),
  ...Object.values(omit(v1beta3, ["DepositDeploymentAuthorization", "GPU"])),
  ...Object.values(v1beta4)
].map(x => ["/" + x.$type, x]);
const missingTypes: ReadonlyArray<[string, GeneratedType]> = [["/cosmos.slashing.v1beta1.MsgUnjail", MsgUnjail]];

export function decodeMsg(type: string, msg: Uint8Array) {
  const myRegistry = new Registry([...defaultRegistryTypes, ...akashTypes, ...missingTypes]);

  const msgType = myRegistry.lookupType(type);

  if (!msgType) {
    throw new Error("Type not found: " + type);
  }

  if (!isTsProtoGeneratedType(msgType)) {
    throw new Error("Type is not generated by ts-protobuf: " + type);
  }

  return msgType.decode(msg) as unknown;
}

export function msgToJSON(type: string, msg: Uint8Array) {
  const myRegistry = new Registry([...defaultRegistryTypes, ...akashTypes, ...missingTypes]);

  const msgType = myRegistry.lookupType(type);

  if (!msgType) {
    throw new Error("Type not found: " + type);
  }

  if (!isTsProtoGeneratedType(msgType)) {
    throw new Error("Type is not generated by ts-protobuf: " + type);
  }

  // @ts-expect-error should be valid
  return msgType.toJSON(msgType.decode(msg));
}

export function uint8arrayToString(arr: Uint8Array) {
  return new TextDecoder().decode(arr);
}
