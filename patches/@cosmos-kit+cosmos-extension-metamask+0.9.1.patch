diff --git a/node_modules/@cosmos-kit/cosmos-extension-metamask/cjs/extension/client.js b/node_modules/@cosmos-kit/cosmos-extension-metamask/cjs/extension/client.js
index 168394a..1c59b34 100644
--- a/node_modules/@cosmos-kit/cosmos-extension-metamask/cjs/extension/client.js
+++ b/node_modules/@cosmos-kit/cosmos-extension-metamask/cjs/extension/client.js
@@ -51,7 +51,6 @@ class CosmosExtensionClient {
             default:
                 return this.getOfflineSignerAmino(chainId);
         }
-        // return this.client.getOfflineSignerAuto(chainId);
     }
     getOfflineSignerAmino(chainId) {
         return new snapper_1.CosmJSOfflineSigner(chainId);
@@ -61,10 +60,26 @@ class CosmosExtensionClient {
             getAccounts: async () => {
                 return [await this.getAccount(chainId)];
             },
-            signDirect: async (signerAddress, signDoc) => await this.signDirect(chainId, signerAddress, {
-                ...signDoc,
-                accountNumber: BigInt(signDoc.accountNumber.toInt()),
-            }),
+            signDirect: async (signerAddress, signDoc) => {
+                const { accountNumber } = signDoc;
+                const signDocNew = {
+                    bodyBytes: signDoc.bodyBytes,
+                    authInfoBytes: signDoc.authInfoBytes,
+                    chainId: signDoc.chainId,
+                    accountNumber: long_1.default.fromString(signDoc.accountNumber.toString())
+                };
+                const signRes = await (0, snapper_1.signDirect)(chainId, signerAddress, signDocNew);
+                const sign = {
+                    signature: signRes.signature,
+                    signed: {
+                        ...signRes.signed,
+                        accountNumber,
+                        authInfoBytes: new Uint8Array(Object.values(signRes.signed.authInfoBytes)),
+                        bodyBytes: new Uint8Array(Object.values(signRes.signed.bodyBytes)),
+                    },
+                };
+                return sign;
+            }
         };
     }
     async signAmino(chainId, signer, signDoc, signOptions) {
@@ -75,10 +90,24 @@ class CosmosExtensionClient {
         return signature;
     }
     async signDirect(chainId, signer, signDoc, signOptions) {
-        return await this.cosmos.signDirect(chainId, signer, {
-            ...signDoc,
-            accountNumber: new long_1.default(Number(signDoc.accountNumber.toString())),
-        });
+        const { accountNumber } = signDoc;
+        const signDocNew = {
+            bodyBytes: signDoc.bodyBytes,
+            authInfoBytes: signDoc.authInfoBytes,
+            chainId: signDoc.chainId,
+            accountNumber: long_1.default.fromString(accountNumber.toString())
+        };
+        const signRes = await (0, snapper_1.signDirect)(chainId, signer, signDocNew);
+        const sign = {
+            signature: signRes.signature,
+            signed: {
+                ...signRes.signed,
+                accountNumber,
+                authInfoBytes: new Uint8Array(Object.values(signRes.signed.authInfoBytes)),
+                bodyBytes: new Uint8Array(Object.values(signRes.signed.bodyBytes)),
+            },
+        };
+        return sign;
     }
 }
 exports.CosmosExtensionClient = CosmosExtensionClient;
diff --git a/node_modules/@cosmos-kit/cosmos-extension-metamask/esm/extension/client.js b/node_modules/@cosmos-kit/cosmos-extension-metamask/esm/extension/client.js
index 6858667..9013007 100644
--- a/node_modules/@cosmos-kit/cosmos-extension-metamask/esm/extension/client.js
+++ b/node_modules/@cosmos-kit/cosmos-extension-metamask/esm/extension/client.js
@@ -1,4 +1,4 @@
-import { CosmJSOfflineSigner, CosmosSnap, installSnap, suggestChain, } from '@cosmsnap/snapper';
+import { CosmJSOfflineSigner, CosmosSnap, installSnap, signDirect, suggestChain, } from '@cosmsnap/snapper';
 import Long from 'long';
 export class CosmosExtensionClient {
     cosmos;
@@ -45,7 +45,6 @@ export class CosmosExtensionClient {
             default:
                 return this.getOfflineSignerAmino(chainId);
         }
-        // return this.client.getOfflineSignerAuto(chainId);
     }
     getOfflineSignerAmino(chainId) {
         return new CosmJSOfflineSigner(chainId);
@@ -55,10 +54,26 @@ export class CosmosExtensionClient {
             getAccounts: async () => {
                 return [await this.getAccount(chainId)];
             },
-            signDirect: async (signerAddress, signDoc) => await this.signDirect(chainId, signerAddress, {
-                ...signDoc,
-                accountNumber: BigInt(signDoc.accountNumber.toInt()),
-            }),
+            signDirect: async (signerAddress, signDoc) => {
+                const { accountNumber } = signDoc;
+                const signDocNew = {
+                    bodyBytes: signDoc.bodyBytes,
+                    authInfoBytes: signDoc.authInfoBytes,
+                    chainId: signDoc.chainId,
+                    accountNumber: Long.fromString(signDoc.accountNumber.toString())
+                };
+                const signRes = await signDirect(chainId, signerAddress, signDocNew);
+                const sign = {
+                    signature: signRes.signature,
+                    signed: {
+                        ...signRes.signed,
+                        accountNumber,
+                        authInfoBytes: new Uint8Array(Object.values(signRes.signed.authInfoBytes)),
+                        bodyBytes: new Uint8Array(Object.values(signRes.signed.bodyBytes)),
+                    },
+                };
+                return sign;
+            }
         };
     }
     async signAmino(chainId, signer, signDoc, signOptions) {
@@ -69,9 +84,23 @@ export class CosmosExtensionClient {
         return signature;
     }
     async signDirect(chainId, signer, signDoc, signOptions) {
-        return await this.cosmos.signDirect(chainId, signer, {
-            ...signDoc,
-            accountNumber: new Long(Number(signDoc.accountNumber.toString())),
-        });
+        const { accountNumber } = signDoc;
+        const signDocNew = {
+            bodyBytes: signDoc.bodyBytes,
+            authInfoBytes: signDoc.authInfoBytes,
+            chainId: signDoc.chainId,
+            accountNumber: Long.fromString(accountNumber.toString())
+        };
+        const signRes = await signDirect(chainId, signer, signDocNew);
+        const sign = {
+            signature: signRes.signature,
+            signed: {
+                ...signRes.signed,
+                accountNumber,
+                authInfoBytes: new Uint8Array(Object.values(signRes.signed.authInfoBytes)),
+                bodyBytes: new Uint8Array(Object.values(signRes.signed.bodyBytes)),
+            },
+        };
+        return sign;
     }
 }
