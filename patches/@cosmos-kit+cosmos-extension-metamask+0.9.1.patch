diff --git a/node_modules/@cosmos-kit/cosmos-extension-metamask/cjs/extension/client.js b/node_modules/@cosmos-kit/cosmos-extension-metamask/cjs/extension/client.js
index 168394a..56db2a1 100644
--- a/node_modules/@cosmos-kit/cosmos-extension-metamask/cjs/extension/client.js
+++ b/node_modules/@cosmos-kit/cosmos-extension-metamask/cjs/extension/client.js
@@ -51,34 +51,43 @@ class CosmosExtensionClient {
             default:
                 return this.getOfflineSignerAmino(chainId);
         }
-        // return this.client.getOfflineSignerAuto(chainId);
     }
     getOfflineSignerAmino(chainId) {
-        return new snapper_1.CosmJSOfflineSigner(chainId);
+        return this.cosmos.getOfflineSigner(chainId, "amino");
     }
     getOfflineSignerDirect(chainId) {
-        return {
-            getAccounts: async () => {
-                return [await this.getAccount(chainId)];
-            },
-            signDirect: async (signerAddress, signDoc) => await this.signDirect(chainId, signerAddress, {
-                ...signDoc,
-                accountNumber: BigInt(signDoc.accountNumber.toInt()),
-            }),
-        };
+        return this.cosmos.getOfflineSigner(chainId, "direct");
     }
     async signAmino(chainId, signer, signDoc, signOptions) {
-        return await this.cosmos.signAmino(chainId, signer, signDoc);
+        return await (0, snapper_1.signAmino)(chainId, signer, signDoc);
     }
     async signArbitrary(chainId, signer, data) {
         const signature = await this.cosmos.signArbitrary(chainId, signer, data);
         return signature;
     }
     async signDirect(chainId, signer, signDoc, signOptions) {
-        return await this.cosmos.signDirect(chainId, signer, {
-            ...signDoc,
-            accountNumber: new long_1.default(Number(signDoc.accountNumber.toString())),
-        });
+        if (chainId !== signDoc.chainId) {
+            throw new Error('Chain IDs do not match.');
+        }
+        const { accountNumber } = signDoc;
+        const accountNumberLong = long_1.default.fromString(accountNumber.toString());
+        const newSignDoc = {
+            bodyBytes: signDoc.bodyBytes,
+            authInfoBytes: signDoc.authInfoBytes,
+            chainId: signDoc.chainId,
+            accountNumber: accountNumberLong
+        };
+        let signRes = await (0, snapper_1.signDirect)(chainId, signer, newSignDoc);
+        const sign = {
+            signature: signRes.signature,
+            signed: {
+                ...signRes.signed,
+                accountNumber: accountNumberLong,
+                authInfoBytes: new Uint8Array(Object.values(signRes.signed.authInfoBytes)),
+                bodyBytes: new Uint8Array(Object.values(signRes.signed.bodyBytes)),
+            },
+        };
+        return sign;
     }
 }
 exports.CosmosExtensionClient = CosmosExtensionClient;
diff --git a/node_modules/@cosmos-kit/cosmos-extension-metamask/esm/extension/client.js b/node_modules/@cosmos-kit/cosmos-extension-metamask/esm/extension/client.js
index 6858667..f626487 100644
--- a/node_modules/@cosmos-kit/cosmos-extension-metamask/esm/extension/client.js
+++ b/node_modules/@cosmos-kit/cosmos-extension-metamask/esm/extension/client.js
@@ -1,4 +1,4 @@
-import { CosmJSOfflineSigner, CosmosSnap, installSnap, suggestChain, } from '@cosmsnap/snapper';
+import { CosmosSnap, installSnap, signDirect, signAmino, suggestChain, } from '@cosmsnap/snapper';
 import Long from 'long';
 export class CosmosExtensionClient {
     cosmos;
@@ -45,33 +45,42 @@ export class CosmosExtensionClient {
             default:
                 return this.getOfflineSignerAmino(chainId);
         }
-        // return this.client.getOfflineSignerAuto(chainId);
     }
     getOfflineSignerAmino(chainId) {
-        return new CosmJSOfflineSigner(chainId);
+        return this.cosmos.getOfflineSigner(chainId, "amino");
     }
     getOfflineSignerDirect(chainId) {
-        return {
-            getAccounts: async () => {
-                return [await this.getAccount(chainId)];
-            },
-            signDirect: async (signerAddress, signDoc) => await this.signDirect(chainId, signerAddress, {
-                ...signDoc,
-                accountNumber: BigInt(signDoc.accountNumber.toInt()),
-            }),
-        };
+        return this.cosmos.getOfflineSigner(chainId, "direct");
     }
     async signAmino(chainId, signer, signDoc, signOptions) {
-        return await this.cosmos.signAmino(chainId, signer, signDoc);
+        return await signAmino(chainId, signer, signDoc);
     }
     async signArbitrary(chainId, signer, data) {
         const signature = await this.cosmos.signArbitrary(chainId, signer, data);
         return signature;
     }
     async signDirect(chainId, signer, signDoc, signOptions) {
-        return await this.cosmos.signDirect(chainId, signer, {
-            ...signDoc,
-            accountNumber: new Long(Number(signDoc.accountNumber.toString())),
-        });
+        if (chainId !== signDoc.chainId) {
+            throw new Error('Chain IDs do not match.');
+        }
+        const { accountNumber } = signDoc;
+        const accountNumberLong = Long.fromString(accountNumber.toString());
+        const newSignDoc = {
+            bodyBytes: signDoc.bodyBytes,
+            authInfoBytes: signDoc.authInfoBytes,
+            chainId: signDoc.chainId,
+            accountNumber: accountNumberLong
+        };
+        let signRes = await signDirect(chainId, signer, newSignDoc);
+        const sign = {
+            signature: signRes.signature,
+            signed: {
+                ...signRes.signed,
+                accountNumber: accountNumberLong,
+                authInfoBytes: new Uint8Array(Object.values(signRes.signed.authInfoBytes)),
+                bodyBytes: new Uint8Array(Object.values(signRes.signed.bodyBytes)),
+            },
+        };
+        return sign;
     }
 }
