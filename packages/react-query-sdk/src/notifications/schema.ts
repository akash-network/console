/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/alerts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getAlerts"];
    put?: never;
    post: operations["createAlert"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/alerts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getAlert"];
    put?: never;
    post?: never;
    delete: operations["deleteAlert"];
    options?: never;
    head?: never;
    patch: operations["patchAlert"];
    trace?: never;
  };
  "/v1/notification-channels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getNotificationChannels"];
    put?: never;
    post: operations["createNotificationChannel"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/notification-channels/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getNotificationChannel"];
    put?: never;
    post?: never;
    delete: operations["deleteNotificationChannel"];
    options?: never;
    head?: never;
    patch: operations["patchNotificationChannel"];
    trace?: never;
  };
  "/v1/deployment-alerts/{dseq}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getDeploymentAlerts"];
    put?: never;
    post: operations["upsertDeploymentAlert"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AlertCreateInput: {
      data:
        | {
            /** Format: uuid */
            notificationChannelId: string;
            name: string;
            /** @default true */
            enabled: boolean;
            summary: string;
            description: string;
            /** @enum {string} */
            type: "CHAIN_MESSAGE";
            params?: {
              dseq: string;
              type: string;
            };
            conditions:
              | {
                  /** @enum {string} */
                  operator: "and";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    field: string;
                    value: string | number | boolean;
                  }[];
                }
              | {
                  /** @enum {string} */
                  operator: "or";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    field: string;
                    value: string | number | boolean;
                  }[];
                }
              | {
                  operator: "eq" | "lt" | "gt" | "lte" | "gte";
                  field: string;
                  value: string | number | boolean;
                };
          }
        | {
            /** Format: uuid */
            notificationChannelId: string;
            name: string;
            /** @default true */
            enabled: boolean;
            summary: string;
            description: string;
            /** @enum {string} */
            type: "DEPLOYMENT_BALANCE";
            conditions:
              | {
                  /** @enum {string} */
                  operator: "and";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    /** @enum {string} */
                    field: "balance";
                    value: number;
                  }[];
                }
              | {
                  /** @enum {string} */
                  operator: "or";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    /** @enum {string} */
                    field: "balance";
                    value: number;
                  }[];
                }
              | {
                  operator: "eq" | "lt" | "gt" | "lte" | "gte";
                  /** @enum {string} */
                  field: "balance";
                  value: number;
                };
            params: {
              dseq: string;
              owner: string;
            };
          };
    };
    AlertOutputResponse: {
      data:
        | {
            /** Format: uuid */
            notificationChannelId: string;
            name: string;
            enabled: boolean;
            summary: string;
            description: string;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId: string;
            notificationChannelName?: string;
            status: string;
            createdAt: unknown;
            updatedAt: unknown;
            /** @enum {string} */
            type: "CHAIN_MESSAGE";
            params?: {
              dseq: string;
              type: string;
            };
            conditions:
              | {
                  /** @enum {string} */
                  operator: "and";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    field: string;
                    value: string | number | boolean;
                  }[];
                }
              | {
                  /** @enum {string} */
                  operator: "or";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    field: string;
                    value: string | number | boolean;
                  }[];
                }
              | {
                  operator: "eq" | "lt" | "gt" | "lte" | "gte";
                  field: string;
                  value: string | number | boolean;
                };
          }
        | {
            /** Format: uuid */
            notificationChannelId: string;
            name: string;
            enabled: boolean;
            summary: string;
            description: string;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId: string;
            notificationChannelName?: string;
            status: string;
            createdAt: unknown;
            updatedAt: unknown;
            /** @enum {string} */
            type: "DEPLOYMENT_BALANCE";
            conditions:
              | {
                  /** @enum {string} */
                  operator: "and";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    /** @enum {string} */
                    field: "balance";
                    value: number;
                  }[];
                }
              | {
                  /** @enum {string} */
                  operator: "or";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    /** @enum {string} */
                    field: "balance";
                    value: number;
                  }[];
                }
              | {
                  operator: "eq" | "lt" | "gt" | "lte" | "gte";
                  /** @enum {string} */
                  field: "balance";
                  value: number;
                };
            params: {
              dseq: string;
              owner: string;
            };
          };
    };
    ValidationErrorResponse: {
      statusCode: number;
      message: string;
      errors: {
        issues: Record<string, never>[];
      };
    };
    UnauthorizedErrorResponse: {
      statusCode: number;
      message: string;
    };
    ForbiddenErrorResponse: {
      statusCode: number;
      message: string;
    };
    InternalServerErrorResponse: {
      statusCode: number;
      message: string;
    };
    AlertListOutputResponse: {
      data: (
        | {
            /** Format: uuid */
            notificationChannelId: string;
            name: string;
            enabled: boolean;
            summary: string;
            description: string;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId: string;
            notificationChannelName?: string;
            status: string;
            createdAt: unknown;
            updatedAt: unknown;
            /** @enum {string} */
            type: "CHAIN_MESSAGE";
            params?: {
              dseq: string;
              type: string;
            };
            conditions:
              | {
                  /** @enum {string} */
                  operator: "and";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    field: string;
                    value: string | number | boolean;
                  }[];
                }
              | {
                  /** @enum {string} */
                  operator: "or";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    field: string;
                    value: string | number | boolean;
                  }[];
                }
              | {
                  operator: "eq" | "lt" | "gt" | "lte" | "gte";
                  field: string;
                  value: string | number | boolean;
                };
          }
        | {
            /** Format: uuid */
            notificationChannelId: string;
            name: string;
            enabled: boolean;
            summary: string;
            description: string;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId: string;
            notificationChannelName?: string;
            status: string;
            createdAt: unknown;
            updatedAt: unknown;
            /** @enum {string} */
            type: "DEPLOYMENT_BALANCE";
            conditions:
              | {
                  /** @enum {string} */
                  operator: "and";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    /** @enum {string} */
                    field: "balance";
                    value: number;
                  }[];
                }
              | {
                  /** @enum {string} */
                  operator: "or";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    /** @enum {string} */
                    field: "balance";
                    value: number;
                  }[];
                }
              | {
                  operator: "eq" | "lt" | "gt" | "lte" | "gte";
                  /** @enum {string} */
                  field: "balance";
                  value: number;
                };
            params: {
              dseq: string;
              owner: string;
            };
          }
      )[];
      pagination: {
        page: number;
        limit: number;
        total: number;
        totalPages: number;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
      };
    };
    AlertPatchInput: {
      data: {
        /** Format: uuid */
        notificationChannelId?: string;
        name?: string;
        /** @default true */
        enabled: boolean;
        summary?: string;
        description?: string;
        conditions?:
          | (
              | {
                  /** @enum {string} */
                  operator: "and";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    field: string;
                    value: string | number | boolean;
                  }[];
                }
              | {
                  /** @enum {string} */
                  operator: "or";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    field: string;
                    value: string | number | boolean;
                  }[];
                }
              | {
                  operator: "eq" | "lt" | "gt" | "lte" | "gte";
                  field: string;
                  value: string | number | boolean;
                }
            )
          | (
              | {
                  /** @enum {string} */
                  operator: "and";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    /** @enum {string} */
                    field: "balance";
                    value: number;
                  }[];
                }
              | {
                  /** @enum {string} */
                  operator: "or";
                  value: {
                    operator: "eq" | "lt" | "gt" | "lte" | "gte";
                    /** @enum {string} */
                    field: "balance";
                    value: number;
                  }[];
                }
              | {
                  operator: "eq" | "lt" | "gt" | "lte" | "gte";
                  /** @enum {string} */
                  field: "balance";
                  value: number;
                }
            );
      };
    };
    NotificationChannelCreateInput: {
      data: {
        name: string;
        /** @enum {string} */
        type: "email";
        config: {
          addresses: string[];
        };
      };
    };
    NotificationChannelOutput: {
      data: {
        name: string;
        /** @enum {string} */
        type: "email";
        config: {
          addresses: string[];
        };
        /** Format: uuid */
        id: string;
        /** Format: uuid */
        userId: string;
        createdAt: unknown;
        updatedAt: unknown;
      };
    };
    NotFoundErrorResponse: {
      statusCode: number;
      message: string;
    };
    NotificationChannelListOutput: {
      data: {
        name: string;
        /** @enum {string} */
        type: "email";
        config: {
          addresses: string[];
        };
        /** Format: uuid */
        id: string;
        /** Format: uuid */
        userId: string;
        createdAt: unknown;
        updatedAt: unknown;
      }[];
      pagination: {
        page: number;
        limit: number;
        total: number;
        totalPages: number;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
      };
    };
    NotificationChannelPatchInput: {
      data: {
        name?: string;
        /** @enum {string} */
        type?: "email";
        config?: {
          addresses: string[];
        };
      };
    };
    DeploymentAlertCreateInput: {
      data: {
        alerts: {
          deploymentBalance?: {
            /** Format: uuid */
            notificationChannelId: string;
            /** @default true */
            enabled: boolean;
            threshold: number;
          };
          deploymentClosed?: {
            /** Format: uuid */
            notificationChannelId: string;
            /** @default true */
            enabled: boolean;
          };
        };
      };
    };
    DeploymentAlertsResponse: {
      data: {
        dseq: string;
        owner?: string;
        alerts: {
          deploymentBalance?: {
            /** Format: uuid */
            notificationChannelId: string;
            /** @default true */
            enabled: boolean;
            threshold: number;
            /** Format: uuid */
            id: string;
            status: string;
          };
          deploymentClosed?: {
            /** Format: uuid */
            notificationChannelId: string;
            /** @default true */
            enabled: boolean;
            /** Format: uuid */
            id: string;
            status: string;
          };
        };
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getAlerts: {
    parameters: {
      query?: {
        /** @description Number of items per page */
        limit?: number;
        /** @description Page number */
        page?: number;
        /** @description Chain message type, used in conjunction with dseq to filter alerts liked to a specific deployment */
        type?: string;
        /** @description Linked deployment's dseq */
        dseq?: string;
      };
      header?: {
        Authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the list of alerts */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AlertListOutputResponse"];
        };
      };
      /** @description Validation error responded when some request parameters are invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationErrorResponse"];
        };
      };
      /** @description Unauthorized error responded when the user is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponse"];
        };
      };
      /** @description Forbidden error responded when the user is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponse"];
        };
      };
      /** @description Internal server error, should probably be reported */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  createAlert: {
    parameters: {
      query?: never;
      header?: {
        Authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AlertCreateInput"];
      };
    };
    responses: {
      /** @description Returns the created alert */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AlertOutputResponse"];
        };
      };
      /** @description Validation error responded when some request parameters are invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationErrorResponse"];
        };
      };
      /** @description Unauthorized error responded when the user is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponse"];
        };
      };
      /** @description Forbidden error responded when the user is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponse"];
        };
      };
      /** @description Internal server error, should probably be reported */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  getAlert: {
    parameters: {
      query?: never;
      header?: {
        Authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the requested alert by id */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AlertOutputResponse"];
        };
      };
      /** @description Validation error responded when some request parameters are invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationErrorResponse"];
        };
      };
      /** @description Unauthorized error responded when the user is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponse"];
        };
      };
      /** @description Forbidden error responded when the user is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponse"];
        };
      };
      /** @description Internal server error, should probably be reported */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  deleteAlert: {
    parameters: {
      query?: never;
      header?: {
        Authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the deleted alert */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AlertOutputResponse"];
        };
      };
      /** @description Validation error responded when some request parameters are invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationErrorResponse"];
        };
      };
      /** @description Unauthorized error responded when the user is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponse"];
        };
      };
      /** @description Forbidden error responded when the user is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponse"];
        };
      };
      /** @description Internal server error, should probably be reported */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  patchAlert: {
    parameters: {
      query?: never;
      header?: {
        Authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AlertPatchInput"];
      };
    };
    responses: {
      /** @description Returns the updated alert */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AlertOutputResponse"];
        };
      };
      /** @description Validation error responded when some request parameters are invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationErrorResponse"];
        };
      };
      /** @description Unauthorized error responded when the user is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponse"];
        };
      };
      /** @description Forbidden error responded when the user is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponse"];
        };
      };
      /** @description Internal server error, should probably be reported */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  getNotificationChannels: {
    parameters: {
      query?: {
        /** @description Number of items per page */
        limit?: number;
        /** @description Page number */
        page?: number;
      };
      header?: {
        Authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a paginated list of notification channels */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotificationChannelListOutput"];
        };
      };
      /** @description Validation error responded when some request parameters are invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationErrorResponse"];
        };
      };
      /** @description Unauthorized error responded when the user is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponse"];
        };
      };
      /** @description Forbidden error responded when the user is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponse"];
        };
      };
      /** @description Internal server error, should probably be reported */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  createNotificationChannel: {
    parameters: {
      query?: never;
      header?: {
        Authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationChannelCreateInput"];
      };
    };
    responses: {
      /** @description Returns the created notification channel */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotificationChannelOutput"];
        };
      };
      /** @description Validation error responded when some request parameters are invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationErrorResponse"];
        };
      };
      /** @description Unauthorized error responded when the user is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponse"];
        };
      };
      /** @description Forbidden error responded when the user is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponse"];
        };
      };
      /** @description Internal server error, should probably be reported */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  getNotificationChannel: {
    parameters: {
      query?: never;
      header?: {
        Authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the requested notification channel by id */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotificationChannelOutput"];
        };
      };
      /** @description Validation error responded when some request parameters are invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationErrorResponse"];
        };
      };
      /** @description Unauthorized error responded when the user is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponse"];
        };
      };
      /** @description Forbidden error responded when the user is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponse"];
        };
      };
      /** @description Returns 404 if the notification channel is not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFoundErrorResponse"];
        };
      };
      /** @description Internal server error, should probably be reported */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  deleteNotificationChannel: {
    parameters: {
      query?: never;
      header?: {
        Authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the deleted notification channel */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotificationChannelOutput"];
        };
      };
      /** @description Validation error responded when some request parameters are invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationErrorResponse"];
        };
      };
      /** @description Unauthorized error responded when the user is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponse"];
        };
      };
      /** @description Forbidden error responded when the user is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponse"];
        };
      };
      /** @description Returns 404 if the notification channel is not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFoundErrorResponse"];
        };
      };
      /** @description Internal server error, should probably be reported */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  patchNotificationChannel: {
    parameters: {
      query?: never;
      header?: {
        Authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationChannelPatchInput"];
      };
    };
    responses: {
      /** @description Returns the updated notification channel */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotificationChannelOutput"];
        };
      };
      /** @description Validation error responded when some request parameters are invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationErrorResponse"];
        };
      };
      /** @description Unauthorized error responded when the user is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponse"];
        };
      };
      /** @description Forbidden error responded when the user is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponse"];
        };
      };
      /** @description Returns 404 if the notification channel is not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFoundErrorResponse"];
        };
      };
      /** @description Internal server error, should probably be reported */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  getDeploymentAlerts: {
    parameters: {
      query?: never;
      header?: {
        Authorization?: string;
      };
      path: {
        dseq: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns alerts for the specified deployment */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeploymentAlertsResponse"];
        };
      };
      /** @description Validation error responded when some request parameters are invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationErrorResponse"];
        };
      };
      /** @description Unauthorized error responded when the user is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponse"];
        };
      };
      /** @description Forbidden error responded when the user is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponse"];
        };
      };
      /** @description Internal server error, should probably be reported */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  upsertDeploymentAlert: {
    parameters: {
      query?: never;
      header?: {
        /** @description The address of the user who owns the deployment */
        "x-owner-address"?: string;
        Authorization?: string;
      };
      path: {
        dseq: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeploymentAlertCreateInput"];
      };
    };
    responses: {
      /** @description Returns the created alert */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeploymentAlertsResponse"];
        };
      };
      /** @description Validation error responded when some request parameters are invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationErrorResponse"];
        };
      };
      /** @description Unauthorized error responded when the user is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponse"];
        };
      };
      /** @description Forbidden error responded when the user is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponse"];
        };
      };
      /** @description Internal server error, should probably be reported */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
}
