name: Deploy k8s

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "The environment to deploy to"
        required: true
        type: choice
        options:
          - staging
          - prod
      app:
        description: "The app to deploy"
        required: true
        type: choice
        options:
          - console-web
          - console-api
          - indexer
          - notifications
          - provider-proxy
          - provider-console
          - provider-console-api
          - provider-console-security
      appVersion:
        description: "The version of the app to deploy"
        required: true
        type: string
      chain:
        description: "The chain to deploy to"
        required: false
        type: choice
        options:
          - NA
          - mainnet
          - sandbox
      skip_beta_deployment_check:
        type: boolean
        required: false
        default: false
        description: >-
          Bypass beta deployment check.
          Use with caution — this will deploy directly to production without verifying the beta environment.
          Skipping this check may result in deploying an unstable version with potential bugs.

  workflow_call:
    inputs:
      environment:
        description: "The environment to deploy to"
        required: true
        type: string
      app:
        description: "The app to deploy"
        required: true
        type: string
      appVersion:
        description: "The version of the app to deploy"
        required: true
        type: string
      chain:
        description: "The chain to deploy to"
        required: false
        type: string

jobs:
  beta-deployment-status:
    runs-on: ubuntu-latest
    outputs:
      can_deploy: ${{ steps.beta-deployment-status.outputs.can_deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Notify in Slack if beta deployment check was skipped
        if: github.event_name == 'workflow_dispatch' && inputs.skip_beta_deployment_check == 'true'
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: incoming-webhook
          webhook: ${{ secrets.FAILED_E2E_TESTS_SLACK_WEBHOOK_URL }}
          payload: |
            blocks:
              - type: "header"
                text:
                  type: "plain_text"
                  text: "Deployment to production without beta deployment check"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: |
                    *App:* ${{ inputs.app }}@${{ inputs.appVersion }}
                    *Workflow:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                    *Author:* ${{ github.actor }}

      - name: Check status of beta deployment
        id: beta-deployment-status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          app_name="${{ inputs.app }}"
          environment="${{ inputs.environment }}"
          app_version="${{ inputs.appVersion }}"
          workflow_name="${app_name}-release.yml"
          skip_beta_deployment_check="${{ inputs.skip_beta_deployment_check }}"

          echo "## Deployment status" >> "$GITHUB_STEP_SUMMARY"

          if [[ "$environment" != "prod" || ! -f ".github/workflows/$workflow_name" ]]; then
            echo "Beta deployment check skipped because the environment is not production or the workflow file does not exist." >> "$GITHUB_STEP_SUMMARY"
            echo "can_deploy=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          version_tag="${app_name}/v${app_version}"
          commit_hash=$(gh -X GET api "repos/akash-network/console/commits/tags/$version_tag" --jq '.sha')
          workflow_run_details=$(gh run list -w "$workflow_name" \
            --limit 1 \
            --commit "$commit_hash" \
            --status "completed" \
            --json conclusion,url \
            --jq '.[0]')

          if [ -z "$workflow_run_details" ]; then
            echo "Beta deployment check skipped because beta workflow run details are empty." >> "$GITHUB_STEP_SUMMARY"
            echo "can_deploy=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          can_deploy=$(echo "$workflow_run_details" | jq -r '.conclusion == "success"')

          if [ "$can_deploy" == "false" ]; then
            echo "## Deployment status" >> "$GITHUB_STEP_SUMMARY"
            workflow_run_url=$(echo "$workflow_run_details" | jq -r '.url')

            if [ "$skip_beta_deployment_check" == "true" ]; then
              echo "Force deployed to production ignoring failed [deployment to staging]($workflow_run_url)" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "The deployment aborted because [deployment to beta]($workflow_run_url) failed." >> "$GITHUB_STEP_SUMMARY"
            fi
          fi

          if [ "$skip_beta_deployment_check" == "true" ]; then
            echo "can_deploy=true" >> "$GITHUB_OUTPUT"
          else
            echo "can_deploy=$can_deploy" >> "$GITHUB_OUTPUT"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: beta-deployment-status
    if: needs.beta-deployment-status.outputs.can_deploy == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load kubeconfig
        id: op-load-secret
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          KUBECONFIG: ${{ vars.OP_KUBECONFIG_URI }}
          TS_OAUTH_CLIENT_ID: ${{ vars.OP_TS_OAUTH_CLIENT_ID_URI }}
          TS_OAUTH_SECRET: ${{ vars.OP_TS_OAUTH_CLIENT_SECRET_URI }}

      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ env.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ env.TS_OAUTH_SECRET }}
          tags: tag:ci
          timeout: 5m
          use-cache: true

      - name: Check tailscale connection
        run: |
          tlrunning=$(tailscale status --json | jq -r '.BackendState')
          if [[ $tlrunning != "Running" ]]; then
              exit 1
          fi

          tlstatus=$(tailscale status --json | jq -r '.CurrentTailnet.Name')

          if [[ $tlstatus != "${{ vars.TAILSCALE_ORG }}" ]]; then
              exit 1
          fi

      - name: Wait for node1-console-akash-network node to be online
        run: |
          echo "Waiting for node1-console-akash-network to be online..."
          for i in {1..30}; do
            ONLINE=$(tailscale status --json | jq -e '.Peer[] | select(.DNSName | contains("node1-console-akash-network")) | .Online')
            if [[ "$ONLINE" == "true" ]]; then
              echo "✅ Peer is online."
              exit 0
            fi
            echo "⏳ Still waiting... ($i)"
            sleep 5
          done

          echo "❌ Timed out waiting for peer node to be online."
          tailscale status
          exit 1

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: "latest"

      - name: Deploy with Helm
        run: |
          echo "$KUBECONFIG" > kubeconfig

          release_name="${{ inputs.app }}"

          values_file_path=".helm/${{ inputs.app }}-${{ inputs.environment }}"

          if [ -n "${{ inputs.chain }}" ] && [ "${{ inputs.chain }}" != "NA" ]; then
            release_name="${release_name}-${{ inputs.chain }}"
            values_file_path="${values_file_path}-${{ inputs.chain }}"
          fi

          values_file_path="${values_file_path}-values.yaml"

          if [ -f "$values_file_path" ]; then
            values_file_arg="--values $values_file_path"
          fi

          chart_name="akash/${{ inputs.app }}"

          helm repo add akash https://akash-network.github.io/helm-charts

          echo "executing: helm upgrade $release_name $chart_name --install --atomic -n ${{ inputs.environment }} --set appVersion=${{ inputs.appVersion }} --debug --kubeconfig kubeconfig $values_file_arg"
          # shellcheck disable=SC2086
          helm upgrade "$release_name" "$chart_name" --install --atomic -n "${{ inputs.environment }}" --set "appVersion=${{ inputs.appVersion }}" --debug --kubeconfig kubeconfig $values_file_arg
