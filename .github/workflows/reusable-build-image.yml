name: Build Image

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to build"
        required: true
        type: string
      deployment-env:
        description: "Deployment environment"
        type: choice
        options:
          - staging
          - production
      tag-latest:
        description: "Whether to mark the image as latest additionally to provided tag"
        type: boolean
        default: true
      force-build:
        description: "Whether to force build the image"
        type: boolean
        default: false
  workflow_call:
    inputs:
      tag:
        description: "Tag to build"
        required: true
        type: string
      deployment-env:
        description: "Deployment environment"
        type: string
      tag-latest:
        description: "Whether to mark the image as latest additionally to provided tag"
        type: boolean
        default: true
      force-build:
        description: "Whether to force build the image"
        type: boolean
        default: false
    outputs:
      image_tag:
        description: "The image tag"
        value: ${{ jobs.build.outputs.image_tag }}
      base_image_tag:
        description: "The base image tag without the pre-release suffix"
        value: ${{ jobs.build.outputs.base_image_tag }}

concurrency:
  group: ${{ github.workflow }}-${{ inputs.tag }}

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ steps.determine.outputs.tag }}
      base_image_tag: ${{ steps.determine.outputs.base_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine registry and app
        id: determine
        env:
          SENTRY_AUTH_TOKEN_CONSOLE_WEB: ${{ secrets.SENTRY_AUTH_TOKEN_CONSOLE_WEB }}
        run: |
          tag="${{ inputs.tag }}"

          if [[ "$tag" == console-api/* ]]; then
            echo "registry=${{ vars.API_REGISTRY }}" >> "$GITHUB_ENV"
            echo "app=api" >> "$GITHUB_ENV"
          elif [[ "$tag" == console-web/* ]]; then
            echo "registry=${{ vars.WEB_REGISTRY }}" >> "$GITHUB_ENV"
            echo "app=deploy-web" >> "$GITHUB_ENV"
            echo "force_build=-f" >> "$GITHUB_ENV"
            echo "SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN_CONSOLE_WEB}" >> "$GITHUB_ENV"
          elif [[ "$tag" == provider-proxy/* ]]; then
            echo "registry=${{ vars.PROVIDER_PROXY_REGISTRY }}" >> "$GITHUB_ENV"
            echo "app=provider-proxy" >> "$GITHUB_ENV"
          elif [[ "$tag" == provider-console/* ]]; then
            echo "registry=${{ vars.PROVIDER_CONSOLE_REGISTRY }}" >> "$GITHUB_ENV"
            echo "app=provider-console" >> "$GITHUB_ENV"
          elif [[ "$tag" == stats-web/* ]]; then
            echo "registry=${{ vars.STATS_WEB_REGISTRY }}" >> "$GITHUB_ENV"
            echo "app=stats-web" >> "$GITHUB_ENV"
          elif [[ "$tag" == notifications/* ]]; then
            echo "registry=${{ vars.NOTIFICATIONS_REGISTRY }}" >> "$GITHUB_ENV"
            echo "app=notifications" >> "$GITHUB_ENV"
          elif [[ "$tag" == indexer/* ]]; then
            echo "registry=${{ vars.INDEXER_REGISTRY }}" >> "$GITHUB_ENV"
            echo "app=indexer" >> "$GITHUB_ENV"
          else
            echo "Error: Unknown tag format = $tag"
            exit 1
          fi

          tag="${tag#*/}"
          tag="${tag#v}"
          echo "tag=$tag" >> "$GITHUB_ENV"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "base_tag=${tag%-*}" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        env:
          DEPLOYMENT_ENV: ${{ inputs.deployment-env }}
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }} # used by console-api to fetch Akash templates
          GIT_COMMIT_HASH: ${{ github.sha }}
        run: |
          if [[ -n "${{ env.force_build }}" ]]; then
            force_build="${{ env.force_build }}"
          elif ${{ inputs.force-build }}; then
            force_build="-f"
          fi

          # shellcheck disable=SC2086
          ./packages/docker/script/build.sh -r ${{ env.registry }} -t ${{ env.tag }} -a ${{ env.app }} -l "${{ inputs.tag-latest }}" "$force_build"
